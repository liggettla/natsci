[
["index.html", "On Matters Of Nature and Science Chapter 1 Prerequisites", " On Matters Of Nature and Science L A Liggett 2019-04-07 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.name/tinytex/. "],
["g2.html", "Chapter 2 Genetics and Genomics 2.1 Introduction 2.2 DNA Replication 2.3 Cloning 2.4 Mutation Rate 2.5 Mutation Hotspots 2.6 Mutation Detection 2.7 Genetic Modifications 2.8 Sequencing Methods 2.9 Diagnostics 2.10 Detecting Common Diseases 2.11 Detecting Rare Diseases", " Chapter 2 Genetics and Genomics floobity 2.1 Introduction A haplotype block is a set of closely linked alleles or markers on a chromosome that tend to be inherited together over evolutionary time. Across Eukaryotes, the frequency of recombination is inversely proportional to overall genome size. The result is that yeast have a recombination rate a few orders of magnitude higher than that of humans (She and Jarosz, 2018). 2.1.1 Subpoint This is some sub info 2.1.2 Second subpoint A haplotype block is a set of closely linked alleles or markers on a chromosome that tend to be inherited together over evolutionary time. Across Eukaryotes, the frequency of recombination is inversely proportional to overall genome size. The result is that yeast have a recombination rate a few orders of magnitude higher than that of humans (She and Jarosz, 2018). 2.2 DNA Replication When the origin of replication(s) is removed from bacteria or eukaryotes, growth and division is restricted or entirely eliminated, but in some strains of archaea like H volcanii, deletion of the origin of replication accelerates cell growth rates. It turns out that this archaea can use a process that is similar to homologous recombination to create a replication fork and replicate its chromosome (Hawkins et al., 2013). 2.3 Cloning A macaque was the first primate to be cloned by SCNT (Liu et al., 2018). 2.4 Mutation Rate Using whole-genome sequencing or next-gen sequencing to determine mutation rates by base, it appears that C&gt;T mutations at CpG sites mutate at a frequency of 10-7 changes/cell division, and all other sites are within the range of 10-8-10-9 base changes per division (Arnheim and Calabrese, 2009, 2016; Campbell and Eichler, 2013; Ségurel et al., 2014). Providing an example of how human mutation rates can differ by geographic origination, europeans compared to african/asian populations have a 1.6 increased mutation rate of a particular mutation (Harris, 2015). It appears that humans have the highest germline mutation rate of all analyzed species (Lynch, 2016) 2.5 Mutation Hotspots There are a number of sporadic mutation hotspots associated with disease incidence, like achondroplasia which has a sporadic incidence rate of 4.5 x 10-5 per generation (Arnheim and Calabrese, 2016; Waller et al., 2008). This disease originates from a single mutation in the FGFR3 gene at a mutation rate ~450 times higher than what would ordinarily be expected at a CpG site (Bellus et al., 1995; Rousseau et al., 1994; Shiang et al., 1994). 2.6 Mutation Detection Pyrophosphorolysis-activated polymerization is a mutation detection method that can detect a single mutant molecule of DNA within 25,000 genomes (Liu and Sommer, 2004; Qin et al., 2007). 2.7 Genetic Modifications Caffeine was cloned to allow for caffeine-deficient coffee and teas without the decaffeination process (Kato et al., 2000). When a DNA-associating protein from tardigrades was cloned into mammalian cells, they became about 40% more tolerant to radiation (Hashimoto et al., 2016). 2.8 Sequencing Methods Using a new sequencing method called sci-RNA-seq, the transcriptome of every cell of 762 cells in C Elegans was sequenced to yield single-cell sequencing results and transcriptome profiling of every cell in the body. The way this is done is by methanol fixing nuclei and then incorporating a UMI when converting to cDNA, then mixing cells again and incorporating another UMI when synthesizing the other strand (Cao et al., 2017). It appears that DAPI does not increase sequencing error rates by Illumina sequencing (Leung et al., 2016). One group came up with a method that is essentially identical to mine in which they use barcoded probes to detect leukemia but they tracked the mutation manually and ignored background (Wong et al. 2015) 2.9 Diagnostics In Li and Snyder Cell 2018, the EHR from hospitals is used to integrate with a machine learning algorithm trained on aneurysm detection. Patients are then whole genome sequenced, and the genome sequencing plus the lifestyle of the individual on EHR is then used to predict if the person has an aneurysm. They were able to achieve pretty robust detection results that could then be used in a prediction setting in the clinic. 2.10 Detecting Common Diseases Much of the following information comes from this review: (Shendure et al. 2019) Linkage disequilibrium studies were designed to detect Mendelian diseases GWAS designed back in 1996 to detect non-mendelian multigenic traits that have much less penetrant effects The promise that GWAS could risk stratify people for diseases has been challenging because most diseases seem to be driven by an extremely large number of variants with small effects that will likely require extremely large sample sizes There exists a problem of missing heritability, and it was often believed that common SNPs only held part of the puzzle, and more rare variants accounted for a great deal of heritability, but this does not yet seem to be the case, and SNPs seem to have a much greater effect size Another problem with GWAS is it is haplotype specific in that it can implicate a stretch of DNA inherited from one parent, but is blind to the individual effect sizes of each of the individual variants A challenge raised by Jonathan Pritchard is that gene regulatory networks are so interconnected that variants in one gene may actually cause changes in other genes and are therefore only peripherally relevant to a phenotype One continued promise of the utility of GWAS to identify the causal genetics behind diseases is that most of the strongest GWAS associations came from small studies of european populations that identified mutations of large effect sizes. By expanding studies to populations, especially those like african populations that have less linkage disequilibrium many more variants of large effect sizes could be identified and used to tease out relationships of smaller effect sizes in other populations. Methods are also improving fo linking regulatory elements to the genes they regulate like (Gasperini et al. 2018; Gasperini et al. 2019). Linking regulatory elements to their corresponding genes can be quite helpful, because this information can be incorporated into GWAS calculations to refine causal linkage probabilities. Polygenic risk scores have often been used to predict phenotypic variance in plants and animals, and have yet to really be applied to human genomics (Khera et al. 2018). Training of PRSs seem to not require fine-mapping, and their use has been aided by the UK Biobank (Bycroft et al. 2018). 2.11 Detecting Rare Diseases There are some 7k mendelian monogenic disorders that impact about 0.5% of live births, but contribute to about 70% of pediatric hospital admissions An important surprise has been that de-novo mutations account for a substantial amount of intellectual disabilities and autism, where as many as 30-60% of ASD is caused by de-novo mutations Currently as many as half of acutely ill inpatient infants can be diagnosed from WGS. There are currently 59 genes designated by the American College of Medical Genetics as being sufficiently clinically actionable as to warrant sequencing and reporting in patients (Kalia et al. 2017). "],
["jupyter.html", "Chapter 3 JupyterLab", " Chapter 3 JupyterLab Here is a simple template that I use that controls a couple useful things when starting a new notebook. import sys sys.path.append(&#39;../util&#39;) %reload_ext autoreload %autoreload 2 from util import * import numpy as np import pandas as pd from matplotlib import pyplot as plt import seaborn as sns sns.set_palette(&#39;pastel&#39;) sns.set_style(&#39;ticks&#39;) sns.set_context(&#39;paper&#39;, font_scale=1) It is often convenient to have a notebook automatically refresh the imported libraries so that they can be modified while working on a JupyterLab notebook. %reload_ext autoreload %autoreload 2 To allow directory organization, dependcies can be separated into different directories and imported into a jupyter notebook using the following import statement. import sys sys.path.append(&#39;../util&#39;) "],
["visualization.html", "Chapter 4 Visualization 4.1 Matplotlib 4.2 Seaborn", " Chapter 4 Visualization 4.1 Matplotlib Plotting a heatmap. import matplotlib.pyplot as plt import numpy as np a = np.random.random((16, 16)) plt.imshow(a, cmap=&#39;RdBu&#39;&#39;, interpolation=&#39;nearest&#39;) plt.show() Possible heatmap colors are: Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples, Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cividis, cividis_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, hsv_r, icefire, icefire_r, inferno, inferno_r, jet, jet_r, magma, magma_r, mako, mako_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, rocket, rocket_r, seismic, seismic_r, spring, spring_r, summer, summer_r, tab10, tab10_r, tab20, tab20_r, tab20b, tab20b_r, tab20c, tab20c_r, terrain, terrain_r, twilight, twilight_r, twilight_shifted, twilight_shifted_r, viridis, viridis_r, vlag, vlag_r, winter, winter_r A simple venn diagram. from matplotlib_venn import venn2 venn2(subsets = (3, 2, 1)) A more complicated venn diagram. from matplotlib import pyplot as plt import numpy as np from matplotlib_venn import venn3, venn3_circles plt.figure(figsize=(4,4)) v = venn3(subsets=(1, 1, 1, 1, 1, 1, 1), set_labels = (&#39;A&#39;, &#39;B&#39;, &#39;C&#39;)) v.get_patch_by_id(&#39;100&#39;).set_alpha(1.0) v.get_patch_by_id(&#39;100&#39;).set_color(&#39;white&#39;) v.get_label_by_id(&#39;100&#39;).set_text(&#39;Unknown&#39;) v.get_label_by_id(&#39;A&#39;).set_text(&#39;Set &quot;A&quot;&#39;) c = venn3_circles(subsets=(1, 1, 1, 1, 1, 1, 1), linestyle=&#39;dotted&#39;) c[0].set_lw(1.0) c[0].set_ls(&#39;dotted&#39;) plt.title(&quot;Sample Venn diagram&quot;) plt.annotate(&#39;Unknown set&#39;, xy=v.get_label_by_id(&#39;100&#39;).get_position() - np.array([0, 0.05]), xytext=(-70,-70), ha=&#39;center&#39;, textcoords=&#39;offset points&#39;, bbox=dict(boxstyle=&#39;round,pad=0.5&#39;, fc=&#39;gray&#39;, alpha=0.1), arrowprops=dict(arrowstyle=&#39;-&gt;&#39;, connectionstyle=&#39;arc3,rad=0.5&#39;,color=&#39;gray&#39;)) plt.show() 4.2 Seaborn Here is a general bar plot that includes some commonly used parameters. # fits my 22 inch monitor plt.figure(figsize=(19.17,11.98)) # order controls the display order of the samples sns.catplot(x=&quot;Sample&quot;, y=&quot;Somatic&quot;, kind=&quot;bar&quot;, data=var_counts, order=labels); # keeps x-axis labels, but eliminates the tick mark plt.tick_params(labelbottom=True, bottom=False) # trim off the x-axis sns.despine(offset=10, trim=True, bottom=True) # labels plt.title(&#39;&#39;) plt.ylabel(&#39;&#39;) plt.xlabel(&#39;&#39;) # manual control of xlabels labels = [&#39;Indiv_1-a&#39;,&#39;Indiv_2&#39;,&#39;Indiv_3&#39;,&#39;Indiv_1-b&#39;] # control xtick order plt.xticks(range(len(labels)), labels, rotation=45) # control the number of x-ticks plt.locator_params(axis=&#39;x&#39;, nbins=10) # legend positioning plt.legend(loc=&#39;upper right&#39;) # log scale plt.gca().set_yscale(&#39;log&#39;) # this is better if neg values are needed plt.gca().set_yscale(&#39;symlog&#39;) # fit plot to display plt.tight_layout() plt.show() # save figure with tight_layout plt.savefig(&quot;test.svg&quot;, format=&quot;svg&quot;, bbox_inches=&quot;tight&quot;) Signifance information can be added by including p-values and label bars using the following code. x1, x2 = 0, 1 # columns to annotate on the plot y2, y1 = 20, 15 # placement of the line and how for down the vertical legs go plt.plot([x1,x1, x2, x2], [y1, y2, y2, y1], linewidth=1, color=&#39;k&#39;) # stats line plt.text((x1+x2)*.5, y2+2, &quot;p=0.09&quot;, ha=&#39;center&#39;, va=&#39;bottom&#39;) # p-value or sig "],
["biology.html", "Chapter 5 Biology 5.1 General 5.2 Biopython 5.3 UCSC Genome Browser 5.4 Ref Genome 5.5 Personal Information", " Chapter 5 Biology 5.1 General Some helpful commands for genetic sequence. from string import ascii_uppercase # python 3 from string import upper, lower # python 2 upper(&#39;tcga&#39;) lower(&#39;TCGA&#39;) title(&#39;tcga&#39;) # capitalize the first letter 5.2 Biopython Reverse complement of sequence from Bio.Seq import Seq str(Seq(i).reverse_complement()) 5.3 UCSC Genome Browser Get sequence from UCSC genome browser from subprocess import check_output, STDOUT temp = check_output(&#39;wget -qO- http://genome.ucsc.edu/cgi-bin/das/hg19/dna?segment=%s:%s,%s&#39; % (vcfObj.chrom,low,high), stderr=STDOUT, shell=True) 5.4 Ref Genome Get sequence from reference genome from subprocess import check_output, STDOUT temp = check_output(&#39;samtools faidx %s %s:%s-%s&#39; % (ref, vcfObj.chrom, low, high), stderr=STDOUT, shell=True) finalSeq = &#39;&#39; for line in temp.decode(&#39;UTF-8&#39;).split(&#39;\\n&#39;): for line in temp.decode(&#39;UTF-8&#39;).split(&#39;\\n&#39;): # this is only necessary in python 3 to convert binary to string if &#39;&gt;&#39; not in line: finalSeq += line finalSeq = finalSeq.upper() 5.5 Personal Information # parse vcf file with parseline if &#39;#&#39; not in line and &#39;chr&#39; in line: # skip the info # vcf handling from parseline import VCFObj # or from util import VCFObj vcfObj = VCFObj(vcfLine) # available attributes: ao, dp, af, wt, var, chrom, location "],
["io.html", "Chapter 6 Data I/O 6.1 Reading Data Files 6.2 Pickles", " Chapter 6 Data I/O 6.1 Reading Data Files Opening .gz files import gzip for line in gzip.open(&#39;myFile.gz&#39;): print line 6.2 Pickles Writing data in pickle format import pickle p = open(&#39;principle.pkl&#39;, &#39;wb&#39;) pickle.dump(principleData, p) p.close() Reading data in pickle format import pickle p = open(&#39;principle.pkl&#39;, &#39;rb&#39;) principleData = pickle.load(p) p.close() "],
["references.html", "References", " References "]
]
